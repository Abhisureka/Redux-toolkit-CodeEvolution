import {createSlice,createAsyncThunk} from ("@reduxjs/toolkit")

// createAsyncThunk under the hood uses redux thunk library
import axios from ("axios");

const initialState = {
	loading: false,
	users: [],
	error: "",
};

// Redux toolkit provides a createAsyncThunk to implement creation and dispatching of async actions.
// Generates pending, fullfilled and rejected action types
// we can listen to these action types with a reducer fn and perform the necessary state transitions
// the reducers though are not generated by the slice and have to be added as extra reducers
export const fetchUsers = createAsyncThunk("user/fetchUsers", () => {
	return axios
		.get("https://jsonplaceholder.typicode.com/users")
		.then((response) => response.data.map((user) => user.id)); // catch block not needed as error is handled ????

	// Special functionality of createAsyncThunk it will actomatically dispatch the promise
	// lifecycle actions(pending, fulfilled, rejected) based on the returned promise
});

const userSlice = createSlice({
	name: "user",
	initialState,
	extraReducers: (builder) => {
		builder.addCase(fetchUsers.pending, (state) => {
			// pending : when the request is made
			state.loading = true;
		});
		builder.addCase(fetchUsers.fulfilled, (state, action) => {
			// fulfilled: when the request succeed
			state.loading = false;
			state.users = action.payload;
			state.error = "";
		});
		builder.addCase(fetchUsers.rejected, (state, action) => {
			// rejected : when the request fails
			state.loading = false;
			state.users = [];
			state.error = action.error;
		});
	},
});

export default userSlice.reducer; // default export

